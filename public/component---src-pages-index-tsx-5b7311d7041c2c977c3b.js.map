{"version":3,"file":"component---src-pages-index-tsx-5b7311d7041c2c977c3b.js","mappings":"0MAyCA,MAzBA,YAAqD,IAArCA,EAAoC,EAApCA,GAAIC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,MAClC,OACEC,EAAAA,cAACC,EAAAA,GAAD,CAAMC,GAAE,YAAcN,GACpBI,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,0BACbH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,4BACbH,EAAAA,cAAAA,MAAAA,CAAKI,IAAKN,EAAUO,IAAQR,EAAL,UAAoBS,MAAM,MAAMC,OAAO,SAEhEP,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,QACbH,EAAAA,cAAAA,OAAAA,CAAMG,UAAU,oCACbK,EAAAA,EAAAA,GAASZ,IAEZI,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,YACZH,EAAAA,cAACS,EAAAA,EAAD,CAAeZ,KAAMA,KAEvBG,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,QACZJ,EAAMW,KAAI,SAACC,GAAD,OACTX,EAAAA,cAACY,EAAAA,EAAD,CAAKC,IAAKF,EAAMA,KAAMA,YCbpC,MAZA,YAAiD,IAA/BG,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,SAC3B,OACEf,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,uDACbH,EAAAA,cAAAA,QAAAA,KAAQc,GACRd,EAAAA,cAAAA,OAAAA,CAAMG,UAAU,oCACdH,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,8BAA8BW,GAC3CC,K,8BCFM,SAASC,IACtB,OAA4BC,EAAAA,EAAAA,KAApBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,GAAoCC,EAAAA,EAAAA,WAAkB,GAA/CC,EAAP,KAAmBC,EAAnB,KAEMC,GAAUC,EAAAA,EAAAA,QAAuB,MAqBvC,OAnBAC,EAAAA,EAAAA,YAAU,WACRC,OAAOC,SAAW,WAChB,IAAMC,EAASL,EAAQM,QAAUN,EAAQM,QAAQC,aAAe,KAE9DJ,OAAOK,YAAcL,OAAOM,aAAeJ,GAC3CV,EAAMe,YAAYC,OAAS,IAE3BZ,GAAc,QAKpBG,EAAAA,EAAAA,YAAU,WACJJ,IAAeH,EAAMiB,cACvBb,GAAc,IACdc,EAAAA,EAAAA,GAAelB,EAAMe,YAAad,MAEnC,CAACD,EAAMe,YAAaf,EAAMiB,YAAahB,EAAUE,IAGlDrB,EAAAA,cAACqC,EAAAA,EAAD,KACErC,EAAAA,cAACsC,EAAD,CAAQxB,UAAU,WAChBd,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,8BACbH,EAAAA,cAAAA,MAAAA,CACEG,UAAU,yEACVoC,IAAKhB,GAEJL,EAAMe,YAAYvB,KAAI,gBAAGd,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,MAAvB,OACrBC,EAAAA,cAACwC,EAAD,CACE3B,IAAKjB,EACLA,GAAIA,EACJC,KAAMA,EACNC,SAAUA,EACVC,MAAOA,QAIbC,EAAAA,cAACyC,EAAAA,EAAD,CAAQC,QAASxB,EAAMiB,cACtBjB,EAAMe,YAAYC,QAAU,IAC3BlC,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,gBACbH,EAAAA,cAAAA,SAAAA,CACEW,KAAK,SACLR,UAAU,kEACVwC,QAAS,kBAAMP,EAAAA,EAAAA,GAAelB,EAAMe,YAAad,KAHnD","sources":["webpack://pokedex/./src/components/Card.tsx","webpack://pokedex/./src/components/Layout.tsx","webpack://pokedex/./src/pages/index.tsx"],"sourcesContent":["import \"../styles/card.css\";\n\nimport { Link } from \"gatsby\";\nimport React from \"react\";\n\nimport formatId from \"../utils/formatId\";\nimport ReplaceGender from \"./ReplaceGender\";\nimport Tag from \"./Tag\";\n\ninterface Props {\n  id: number;\n  name: string;\n  imageUrl: string;\n  types: string[];\n}\n\nfunction Card({ id, name, imageUrl, types }: Props) {\n  return (\n    <Link to={`/pokemon/${id}`}>\n      <div className=\"m-auto mb-10 w-52 card\">\n        <div className=\"rounded-md bg-light-gray\">\n          <img src={imageUrl} alt={`${name} sprite`} width=\"200\" height=\"200\" />\n        </div>\n        <div className=\"px-2\">\n          <span className=\"text-xs font-bold text-gray-500\">\n            {formatId(id)}\n          </span>\n          <h2 className=\"text-2xl\">\n            <ReplaceGender name={name} />\n          </h2>\n          <div className=\"flex\">\n            {types.map((type: string) => (\n              <Tag key={type} type={type} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n\ninterface Props {\n  pageTitle: string;\n  children: React.ReactNode;\n}\n\nfunction Layout({ pageTitle, children }: Props) {\n  return (\n    <div className=\"mx-auto lg:max-w-7xl mt-10 bg-white bg-container-bg\">\n      <title>{pageTitle}</title>\n      <main className=\"mx-auto max-w-5xl pt-10 bg-white\">\n        <h1 className=\"text-3xl mx-20 mt-10 mb-24\">{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport Card from \"../components/Card\";\nimport Layout from \"../components/Layout\";\nimport Loader from \"../components/Loader\";\nimport { getPokemonData } from \"../context/pokemonContext/pokemonActions\";\nimport {\n  PokemonProvider,\n  usePokemon,\n} from \"../context/pokemonContext/pokemonContext\";\n\nexport default function IndexPage() {\n  const { state, dispatch } = usePokemon();\n  const [shouldLoad, setShouldLoad] = useState<boolean>(true);\n\n  const listRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    window.onscroll = () => {\n      const target = listRef.current ? listRef.current.clientHeight : 9999;\n      if (\n        window.pageYOffset + window.innerHeight >= target &&\n        state.pokemonList.length > 12\n      ) {\n        setShouldLoad(true);\n      }\n    };\n  });\n\n  useEffect(() => {\n    if (shouldLoad && !state.loadingData) {\n      setShouldLoad(false);\n      getPokemonData(state.pokemonList, dispatch);\n    }\n  }, [state.pokemonList, state.loadingData, dispatch, shouldLoad]);\n\n  return (\n    <PokemonProvider>\n      <Layout pageTitle=\"Pokédex\">\n        <div className=\"m-auto mb-40 flex flex-col\">\n          <div\n            className=\"grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 mb-20\"\n            ref={listRef}\n          >\n            {state.pokemonList.map(({ id, name, imageUrl, types }) => (\n              <Card\n                key={id}\n                id={id}\n                name={name}\n                imageUrl={imageUrl}\n                types={types}\n              />\n            ))}\n          </div>\n          <Loader loading={state.loadingData} />\n          {state.pokemonList.length <= 12 && (\n            <div className=\"m-auto mb-20\">\n              <button\n                type=\"button\"\n                className=\"text-white p-2 px-6 rounded-md bg-light-blue hover:bg-dark-blue\"\n                onClick={() => getPokemonData(state.pokemonList, dispatch)}\n              >\n                Load more Pokémon\n              </button>\n            </div>\n          )}\n        </div>\n      </Layout>\n    </PokemonProvider>\n  );\n}\n"],"names":["id","name","imageUrl","types","React","Link","to","className","src","alt","width","height","formatId","ReplaceGender","map","type","Tag","key","pageTitle","children","IndexPage","usePokemon","state","dispatch","useState","shouldLoad","setShouldLoad","listRef","useRef","useEffect","window","onscroll","target","current","clientHeight","pageYOffset","innerHeight","pokemonList","length","loadingData","getPokemonData","PokemonProvider","Layout","ref","Card","Loader","loading","onClick"],"sourceRoot":""}